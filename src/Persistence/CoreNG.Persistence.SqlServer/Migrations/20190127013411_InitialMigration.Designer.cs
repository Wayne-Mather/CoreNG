// <auto-generated />
using System;
using CoreNG.Persistence.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoreNG.Persistence.SqlServer.Migrations
{
    [DbContext(typeof(CoreNgDbContext))]
    [Migration("20190127013411_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoreNG.Common.Entities.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(12,2)");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("AccountId")
                        .HasName("PK_Account");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("CoreNG.Common.Entities.Budget", b =>
                {
                    b.Property<int>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BudgetCategoryId");

                    b.Property<decimal>("Budgeted");

                    b.Property<int>("Month");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("TotalTransacted")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("Year");

                    b.HasKey("BudgetId")
                        .HasName("PK_Budget");

                    b.ToTable("Budget");
                });

            modelBuilder.Entity("CoreNG.Common.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("CategoryId")
                        .HasName("PK_Category");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("CoreNG.Common.Entities.Ledger", b =>
                {
                    b.Property<Guid>("LedgerTransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount");

                    b.Property<int>("CategoryId");

                    b.Property<int>("Colour");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("Reconciled");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("LedgerTransactionId")
                        .HasName("PK_Ledger");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DateTime");

                    b.ToTable("Ledger");
                });

            modelBuilder.Entity("CoreNG.Common.Entities.ScheduledTransaction", b =>
                {
                    b.Property<int>("ScheduledTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(12,2)");

                    b.Property<int>("CategoryId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ScheduleType");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("ScheduledTransactionId")
                        .HasName("PK_ScheduledTransaction");

                    b.HasIndex("AccountId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("ScheduledTransaction");
                });

            modelBuilder.Entity("CoreNG.Common.Entities.Ledger", b =>
                {
                    b.HasOne("CoreNG.Common.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Ledger_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreNG.Common.Entities.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Ledger_Category")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CoreNG.Common.Entities.ScheduledTransaction", b =>
                {
                    b.HasOne("CoreNG.Common.Entities.Account", "Account")
                        .WithMany("ScheduledTransactions")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_ScheduledTransaction_Account")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CoreNG.Common.Entities.Category", "Category")
                        .WithMany("ScheduledTransactions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_ScheduledTransaction_Category")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
